/* Les connaissances de base */

all(aMaitre, humain).

subs(chat, felin).
subs(lion, felin).
subs(chien, canide).
subs(canide, chien).
subs(souris, mammifere).
subs(felin, mammifere).
subs(canide, mammifere).
subs(mammifere, animal).
subs(canari, animal).
subs(animal, etreVivant).
subs(and(animal, plante), nothing).
subs(and(animal, some(aMaitre)), pet).
subs(pet, some(aMaitre)).

subs(chihuahua, and(chien, pet)).

subs(lion, carnivoreExc).
subs(carnivoreExc, predateur).
subs(animal, some(mange)).
subs(and(some(mange), all(mange, nothing)), nothing).

equiv(carnivoreExc, all(mange, animal)).
equiv(herbivoreExc, all(mange, plante)).
equiv(l, lion).

inst(felix, chat).
inst(pierre, humain).
inst(princesse, chihuahua).
inst(marie, humain).
inst(jerry, souris).
inst(titi, canari).

instR(felix, aMaitre, pierre).
instR(felix, mange, jerry).
instR(felix, mange, titi).

subsS1(C, C).
subsS1(C, D) :- subs(C, D), C \== D.
subsS1(C, D) :- subs(C, E), subsS1(E, D).

/* Règles pour la subsomption structurelle de manière générale */
subsS(C, D) :- subsS(C, D, [C]).
subsS(C, C, _).
subsS(C, D, _) :- subs(C, D), C \== D.
subsS(C, D, L) :- subs(C, E), not(member(E, L)), subsS(E, D, [E | L]), E \== D.
/* Règles permettantes de gérer l'équivalence*/
subsS(C, D) :- equiv(C, D).
subsS(C, D) :- equiv(D, C).
subsS(C, D) :- subsS(C, E), equiv(E, D).
/* Gestion de l'intersection */
subsS(C, and(D1, D2), L) :- D1 \= D2, subsS(C, D1, L), subsS(C, D2, L).
subsS(C, D, L) :- subs(and(D1, D2), D), E = and(D1, D2), not(member(E, L)), subsS(C, E, [E | L]), E \== C.
subsS(and(C, C), D, L) :- nonvar(C), subsS(C, D, [C | L]).
subsS(and(C1, C2), D, L) :- C1 \= C2, subsS(C1, D, [C1 | L]).
subsS(and(C1, C2), D, L) :- C1 \= C2, subsS(C2, D, [C2 | L]).
subsS(and(C1, C2), D, L) :- subs(C1, E1), E = and(E1, C2), not(member(E, L)), subsS(E, D, [E | L]), E \== D.
subsS(and(C1, C2), D, L) :- Cinv = and(C2, C1), not(member(Cinv, L)), subsS(Cinv, D, [Cinv | L]).
/* Gestion des rôles */
/*
subsS(C, all(R, D)) :- subsS(C, all(R, E), [C]), subsS(E, D).
subsS(all(R, C), D) :- subsS(all(R, E), D), subsS(C, E). 
subsS(all(R, C), all(R, D)) :- subsS(C, D).
*/


